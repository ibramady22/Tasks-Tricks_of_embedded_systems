
Tasks_Tricks.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000d7c  00000e10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800082  00800082  00000e32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ee2  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001036  00000000  00000000  00004152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001df3  00000000  00000000  00005188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b5c  00000000  00000000  00006f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000060ba  00000000  00000000  00007ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027e0  00000000  00000000  0000db92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  00010372  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000159d  00000000  00000000  000106b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	1f c4       	rjmp	.+2110   	; 0x844 <__vector_1>
   6:	00 00       	nop
   8:	46 c4       	rjmp	.+2188   	; 0x896 <__vector_2>
   a:	00 00       	nop
   c:	6d c4       	rjmp	.+2266   	; 0x8e8 <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	d7 c5       	rjmp	.+2990   	; 0xbc8 <__vector_6>
  1a:	00 00       	nop
  1c:	ac c5       	rjmp	.+2904   	; 0xb76 <__vector_7>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	7f c5       	rjmp	.+2814   	; 0xb24 <__vector_9>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	af c4       	rjmp	.+2398   	; 0x98c <__vector_11>
  2e:	00 00       	nop
  30:	84 c4       	rjmp	.+2312   	; 0x93a <__vector_12>
  32:	00 00       	nop
  34:	1b c6       	rjmp	.+3126   	; 0xc6c <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ee c5       	rjmp	.+3036   	; 0xc1a <__vector_15>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 39       	cpi	r26, 0x97	; 151
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	9c d1       	rcall	.+824    	; 0x3c0 <main>
  88:	77 c6       	rjmp	.+3310   	; 0xd78 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <Toggle_led1>:


static u8 counter_time =0;
static void Toggle_led1(void)
{
	DIO_TogglePin(LED1_PIN);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	10 c3       	rjmp	.+1568   	; 0x6b0 <DIO_TogglePin>
  90:	08 95       	ret

00000092 <Toggle_led2>:
}
static void Toggle_led2(void)
{
	counter_time++;
  92:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
	if(counter_time==60)
  9c:	8c 33       	cpi	r24, 0x3C	; 60
  9e:	21 f4       	brne	.+8      	; 0xa8 <Toggle_led2+0x16>
	{
		DIO_TogglePin(LED2_PIN);
  a0:	81 e1       	ldi	r24, 0x11	; 17
  a2:	06 d3       	rcall	.+1548   	; 0x6b0 <DIO_TogglePin>
		counter_time=0;
  a4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end>
  a8:	08 95       	ret

000000aa <ButtonLed_System_Run>:

/* external event: pressing button */
void ButtonLed_System_Run (void )
{
	/* initiate the dio */
	DIO_Init();
  aa:	95 d1       	rcall	.+810    	; 0x3d6 <DIO_Init>
	/* initiate the external interrupt with  ext interrupt (0) and SenseControl (falling edge) */
	EX_INT_SetSenseControl(EX_INT0,FALLING_EDGE);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	3c d3       	rcall	.+1656   	; 0x72a <EX_INT_SetSenseControl>
	EX_INT_SetCall_Back(EX_INT0,Toggle_led1);
  b2:	66 e4       	ldi	r22, 0x46	; 70
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
	/* enable the interrupt & global interrupt */
	EX_INT_Enable(EX_INT0);
  b8:	b0 d3       	rcall	.+1888   	; 0x81a <EX_INT_SetCall_Back>
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	9c c3       	rjmp	.+1848   	; 0x7f6 <EX_INT_Enable>
  be:	08 95       	ret

000000c0 <Timer_3s_System_Run>:

/* internal event: overflow timer (3 sec) */
void Timer_3s_System_Run (void )
{
	/* initiate the dio */
	DIO_Init();
  c0:	8a d1       	rcall	.+788    	; 0x3d6 <DIO_Init>
	/**/
	Timer1_SetInterruptTime_ms(50,Toggle_led2);
  c2:	69 e4       	ldi	r22, 0x49	; 73
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	82 e3       	ldi	r24, 0x32	; 50
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	f9 c5       	rjmp	.+3058   	; 0xcbe <Timer1_SetInterruptTime_ms>
  cc:	08 95       	ret

000000ce <WriteData>:
	_delay_ms(1);
}


static void WriteData(u8 data)
{
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,HIGH);
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	67 d2       	rcall	.+1230   	; 0x5a6 <DIO_WritePin>
	/*****High data ****/
	DIO_WritePin(D7,READ_BIT(data,7));
  d8:	6c 2f       	mov	r22, r28
  da:	66 1f       	adc	r22, r22
  dc:	66 27       	eor	r22, r22
  de:	66 1f       	adc	r22, r22
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	61 d2       	rcall	.+1218   	; 0x5a6 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
  e4:	c6 fb       	bst	r28, 6
  e6:	66 27       	eor	r22, r22
  e8:	60 f9       	bld	r22, 0
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	5c d2       	rcall	.+1208   	; 0x5a6 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
  ee:	c5 fb       	bst	r28, 5
  f0:	66 27       	eor	r22, r22
  f2:	60 f9       	bld	r22, 0
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	57 d2       	rcall	.+1198   	; 0x5a6 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
  f8:	c4 fb       	bst	r28, 4
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	83 e0       	ldi	r24, 0x03	; 3
	DIO_WritePin(EN,HIGH); // trigger
 100:	52 d2       	rcall	.+1188   	; 0x5a6 <DIO_WritePin>
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	4f d2       	rcall	.+1182   	; 0x5a6 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	8f ec       	ldi	r24, 0xCF	; 207
 10a:	97 e0       	ldi	r25, 0x07	; 7
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <WriteData+0x3e>
 110:	00 c0       	rjmp	.+0      	; 0x112 <WriteData+0x44>
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 112:	00 00       	nop
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	46 d2       	rcall	.+1164   	; 0x5a6 <DIO_WritePin>
 11a:	8f ec       	ldi	r24, 0xCF	; 207
 11c:	97 e0       	ldi	r25, 0x07	; 7
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <WriteData+0x50>
 122:	00 c0       	rjmp	.+0      	; 0x124 <WriteData+0x56>
	_delay_ms(1);
	
	/*****Low data ****/
	DIO_WritePin(D7,READ_BIT(data,3));
 124:	00 00       	nop
 126:	c3 fb       	bst	r28, 3
 128:	66 27       	eor	r22, r22
 12a:	60 f9       	bld	r22, 0
 12c:	86 e0       	ldi	r24, 0x06	; 6
	DIO_WritePin(D6,READ_BIT(data,2));
 12e:	3b d2       	rcall	.+1142   	; 0x5a6 <DIO_WritePin>
 130:	c2 fb       	bst	r28, 2
 132:	66 27       	eor	r22, r22
 134:	60 f9       	bld	r22, 0
 136:	85 e0       	ldi	r24, 0x05	; 5
	DIO_WritePin(D5,READ_BIT(data,1));
 138:	36 d2       	rcall	.+1132   	; 0x5a6 <DIO_WritePin>
 13a:	c1 fb       	bst	r28, 1
 13c:	66 27       	eor	r22, r22
 13e:	60 f9       	bld	r22, 0
 140:	84 e0       	ldi	r24, 0x04	; 4
	DIO_WritePin(D4,READ_BIT(data,0));
 142:	31 d2       	rcall	.+1122   	; 0x5a6 <DIO_WritePin>
 144:	6c 2f       	mov	r22, r28
 146:	61 70       	andi	r22, 0x01	; 1
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	2d d2       	rcall	.+1114   	; 0x5a6 <DIO_WritePin>
	DIO_WritePin(EN,HIGH); // trigger
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	2a d2       	rcall	.+1108   	; 0x5a6 <DIO_WritePin>
 152:	8f ec       	ldi	r24, 0xCF	; 207
 154:	97 e0       	ldi	r25, 0x07	; 7
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <WriteData+0x88>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <WriteData+0x8e>
 15c:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	21 d2       	rcall	.+1090   	; 0x5a6 <DIO_WritePin>
 164:	8f ec       	ldi	r24, 0xCF	; 207
 166:	97 e0       	ldi	r25, 0x07	; 7
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <WriteData+0x9a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <WriteData+0xa0>
 16e:	00 00       	nop
 170:	cf 91       	pop	r28
	_delay_ms(1);
}
 172:	08 95       	ret

00000174 <WriteInstruction>:
 174:	cf 93       	push	r28
#elif LCD_MODE==_4_BIT



 void WriteInstruction(u8 ins) //write number on lcd port
{
 176:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,LOW);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	14 d2       	rcall	.+1064   	; 0x5a6 <DIO_WritePin>
	/*****High data ****/
	DIO_WritePin(D7,READ_BIT(ins,7));
 17e:	6c 2f       	mov	r22, r28
 180:	66 1f       	adc	r22, r22
 182:	66 27       	eor	r22, r22
 184:	66 1f       	adc	r22, r22
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e d2       	rcall	.+1052   	; 0x5a6 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
 18a:	c6 fb       	bst	r28, 6
 18c:	66 27       	eor	r22, r22
 18e:	60 f9       	bld	r22, 0
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	09 d2       	rcall	.+1042   	; 0x5a6 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
 194:	c5 fb       	bst	r28, 5
 196:	66 27       	eor	r22, r22
 198:	60 f9       	bld	r22, 0
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	04 d2       	rcall	.+1032   	; 0x5a6 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
 19e:	c4 fb       	bst	r28, 4
 1a0:	66 27       	eor	r22, r22
 1a2:	60 f9       	bld	r22, 0
 1a4:	83 e0       	ldi	r24, 0x03	; 3
	DIO_WritePin(EN,HIGH); // trigger
 1a6:	ff d1       	rcall	.+1022   	; 0x5a6 <DIO_WritePin>
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	fc d1       	rcall	.+1016   	; 0x5a6 <DIO_WritePin>
 1ae:	8f ec       	ldi	r24, 0xCF	; 207
 1b0:	97 e0       	ldi	r25, 0x07	; 7
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <WriteInstruction+0x3e>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <WriteInstruction+0x44>
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 1b8:	00 00       	nop
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	f3 d1       	rcall	.+998    	; 0x5a6 <DIO_WritePin>
 1c0:	8f ec       	ldi	r24, 0xCF	; 207
 1c2:	97 e0       	ldi	r25, 0x07	; 7
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <WriteInstruction+0x50>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <WriteInstruction+0x56>
	_delay_ms(1);
	
	/*****Low data ****/
	DIO_WritePin(D7,READ_BIT(ins,3));
 1ca:	00 00       	nop
 1cc:	c3 fb       	bst	r28, 3
 1ce:	66 27       	eor	r22, r22
 1d0:	60 f9       	bld	r22, 0
 1d2:	86 e0       	ldi	r24, 0x06	; 6
	DIO_WritePin(D6,READ_BIT(ins,2));
 1d4:	e8 d1       	rcall	.+976    	; 0x5a6 <DIO_WritePin>
 1d6:	c2 fb       	bst	r28, 2
 1d8:	66 27       	eor	r22, r22
 1da:	60 f9       	bld	r22, 0
 1dc:	85 e0       	ldi	r24, 0x05	; 5
	DIO_WritePin(D5,READ_BIT(ins,1));
 1de:	e3 d1       	rcall	.+966    	; 0x5a6 <DIO_WritePin>
 1e0:	c1 fb       	bst	r28, 1
 1e2:	66 27       	eor	r22, r22
 1e4:	60 f9       	bld	r22, 0
 1e6:	84 e0       	ldi	r24, 0x04	; 4
	DIO_WritePin(D4,READ_BIT(ins,0));
 1e8:	de d1       	rcall	.+956    	; 0x5a6 <DIO_WritePin>
 1ea:	6c 2f       	mov	r22, r28
 1ec:	61 70       	andi	r22, 0x01	; 1
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	da d1       	rcall	.+948    	; 0x5a6 <DIO_WritePin>
	DIO_WritePin(EN,HIGH); // trigger
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	d7 d1       	rcall	.+942    	; 0x5a6 <DIO_WritePin>
 1f8:	8f ec       	ldi	r24, 0xCF	; 207
 1fa:	97 e0       	ldi	r25, 0x07	; 7
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <WriteInstruction+0x88>
 200:	00 c0       	rjmp	.+0      	; 0x202 <WriteInstruction+0x8e>
 202:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	ce d1       	rcall	.+924    	; 0x5a6 <DIO_WritePin>
 20a:	8f ec       	ldi	r24, 0xCF	; 207
 20c:	97 e0       	ldi	r25, 0x07	; 7
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <WriteInstruction+0x9a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <WriteInstruction+0xa0>
 214:	00 00       	nop
 216:	cf 91       	pop	r28
	_delay_ms(1);
}
 218:	08 95       	ret

0000021a <LCD_Init>:
 21a:	2f e7       	ldi	r18, 0x7F	; 127
 21c:	88 e3       	ldi	r24, 0x38	; 56
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <LCD_Init+0x6>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_Init+0x10>
 22a:	00 00       	nop
	_delay_ms(1);
}
void LCD_Init(void)
{
	_delay_ms(50);
	WriteInstruction(0x02);
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	a2 df       	rcall	.-188    	; 0x174 <WriteInstruction>
	WriteInstruction(0x28); //  2 line    4 bit mode
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	a0 df       	rcall	.-192    	; 0x174 <WriteInstruction>
	WriteInstruction(0x0c); //  cursor     0x0c off ,0x0f on
 234:	8c e0       	ldi	r24, 0x0C	; 12
 236:	9e df       	rcall	.-196    	; 0x174 <WriteInstruction>
	WriteInstruction(0x01); // clear screen
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	9c df       	rcall	.-200    	; 0x174 <WriteInstruction>
 23c:	8f ec       	ldi	r24, 0xCF	; 207
 23e:	97 e0       	ldi	r25, 0x07	; 7
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Init+0x26>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x2c>
 246:	00 00       	nop
	_delay_ms(1);
	WriteInstruction(0x06); // increase DDRAM address , no Shifting
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	94 cf       	rjmp	.-216    	; 0x174 <WriteInstruction>
 24c:	08 95       	ret

0000024e <LCD_SetCursor>:
 24e:	cf 93       	push	r28
		LCD_WriteChar(str[i]);
	}
}

Error_type LCD_SetCursor(u8 line,u8 cell) //line 1,2 cell 1:16
{
 250:	df 93       	push	r29
 252:	d8 2f       	mov	r29, r24
	cell--; //cells began with address 0 in CGRAM
 254:	cf ef       	ldi	r28, 0xFF	; 255
 256:	c6 0f       	add	r28, r22
	if(line==MIN_LINE && cell<MAX_CELL)
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	31 f4       	brne	.+12     	; 0x268 <LCD_SetCursor+0x1a>
 25c:	c0 31       	cpi	r28, 0x10	; 16
 25e:	90 f4       	brcc	.+36     	; 0x284 <LCD_SetCursor+0x36>
	{
		WriteInstruction((0x80)|cell); 
 260:	8c 2f       	mov	r24, r28
 262:	80 68       	ori	r24, 0x80	; 128
 264:	87 df       	rcall	.-242    	; 0x174 <WriteInstruction>
 266:	08 c0       	rjmp	.+16     	; 0x278 <LCD_SetCursor+0x2a>
	}
	else if(line==MAX_LINE && cell<MAX_CELL)
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	71 f4       	brne	.+28     	; 0x288 <LCD_SetCursor+0x3a>
 26c:	c0 31       	cpi	r28, 0x10	; 16
 26e:	70 f4       	brcc	.+28     	; 0x28c <LCD_SetCursor+0x3e>
	{
		WriteInstruction(((0x80)|cell)+0x40);
 270:	8c 2f       	mov	r24, r28
 272:	80 68       	ori	r24, 0x80	; 128
 274:	80 5c       	subi	r24, 0xC0	; 192
 276:	7e df       	rcall	.-260    	; 0x174 <WriteInstruction>
	}
	else
	{
		return OUT_OF_RENGE;
	}
	lcd_cursorCell=cell;
 278:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <lcd_cursorCell>
	lcd_cursorLine=line;
 27c:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__DATA_REGION_ORIGIN__>
	return OK;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	05 c0       	rjmp	.+10     	; 0x28e <LCD_SetCursor+0x40>
	{
		WriteInstruction(((0x80)|cell)+0x40);
	}
	else
	{
		return OUT_OF_RENGE;
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	03 c0       	rjmp	.+6      	; 0x28e <LCD_SetCursor+0x40>
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	01 c0       	rjmp	.+2      	; 0x28e <LCD_SetCursor+0x40>
 28c:	83 e0       	ldi	r24, 0x03	; 3
	}
	lcd_cursorCell=cell;
	lcd_cursorLine=line;
	return OK;
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <LCD_ManageCursor>:
#endif 


void LCD_ManageCursor()
{
	if(lcd_cursorCell>MAX_CELL)
 294:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lcd_cursorCell>
 298:	81 31       	cpi	r24, 0x11	; 17
 29a:	68 f0       	brcs	.+26     	; 0x2b6 <LCD_ManageCursor+0x22>
	{
		if(lcd_cursorLine==MIN_LINE)
 29c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	21 f4       	brne	.+8      	; 0x2ac <LCD_ManageCursor+0x18>
		{
			LCD_SetCursor(MAX_LINE,MIN_CELL);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	d2 cf       	rjmp	.-92     	; 0x24e <LCD_SetCursor>
 2aa:	08 95       	ret
		}
		else if(lcd_cursorLine==MAX_LINE)
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <LCD_ManageCursor+0x22>
		{
			LCD_SetCursor(MIN_LINE,MIN_CELL);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	cc cf       	rjmp	.-104    	; 0x24e <LCD_SetCursor>
 2b6:	08 95       	ret

000002b8 <LCD_WriteChar>:
		}
	}
}

void LCD_WriteChar(u8 ch)
{
 2b8:	cf 93       	push	r28
 2ba:	c8 2f       	mov	r28, r24
	LCD_ManageCursor();
 2bc:	eb df       	rcall	.-42     	; 0x294 <LCD_ManageCursor>
	WriteData(ch);
 2be:	8c 2f       	mov	r24, r28
 2c0:	06 df       	rcall	.-500    	; 0xce <WriteData>
	lcd_cursorCell++;
 2c2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lcd_cursorCell>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lcd_cursorCell>
}
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <LCD_WriteNumber>:
void LCD_WriteNumber(s32 num)
{
 2d0:	4f 92       	push	r4
 2d2:	5f 92       	push	r5
 2d4:	6f 92       	push	r6
 2d6:	7f 92       	push	r7
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	60 97       	sbiw	r28, 0x10	; 16
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	6b 01       	movw	r12, r22
 2fc:	7c 01       	movw	r14, r24
	u8 i=0,str[16];
	s8 j;
	if(num==0)
 2fe:	61 15       	cp	r22, r1
 300:	71 05       	cpc	r23, r1
 302:	81 05       	cpc	r24, r1
 304:	91 05       	cpc	r25, r1
 306:	19 f4       	brne	.+6      	; 0x30e <LCD_WriteNumber+0x3e>
	{
		LCD_WriteChar('0');
 308:	80 e3       	ldi	r24, 0x30	; 48
 30a:	d6 df       	rcall	.-84     	; 0x2b8 <LCD_WriteChar>
 30c:	45 c0       	rjmp	.+138    	; 0x398 <LCD_WriteNumber+0xc8>
		return;
	}
	else if (num<0)
 30e:	99 23       	and	r25, r25
 310:	7c f4       	brge	.+30     	; 0x330 <LCD_WriteNumber+0x60>
	{
		num*=-1;
 312:	f0 94       	com	r15
 314:	e0 94       	com	r14
 316:	d0 94       	com	r13
 318:	c0 94       	com	r12
 31a:	c1 1c       	adc	r12, r1
 31c:	d1 1c       	adc	r13, r1
 31e:	e1 1c       	adc	r14, r1
 320:	f1 1c       	adc	r15, r1
		LCD_WriteChar('-');
 322:	8d e2       	ldi	r24, 0x2D	; 45
 324:	c9 df       	rcall	.-110    	; 0x2b8 <LCD_WriteChar>
	}
	else
	{
		
	}
	while(num)
 326:	c1 14       	cp	r12, r1
 328:	d1 04       	cpc	r13, r1
 32a:	e1 04       	cpc	r14, r1
 32c:	f1 04       	cpc	r15, r1
 32e:	a1 f1       	breq	.+104    	; 0x398 <LCD_WriteNumber+0xc8>
	LCD_ManageCursor();
	WriteData(ch);
	lcd_cursorCell++;
}
void LCD_WriteNumber(s32 num)
{
 330:	10 e0       	ldi	r17, 0x00	; 0
	{
		
	}
	while(num)
	{
		str[i]=num%10 +'0';
 332:	0f 2e       	mov	r0, r31
 334:	fa e0       	ldi	r31, 0x0A	; 10
 336:	4f 2e       	mov	r4, r31
 338:	51 2c       	mov	r5, r1
 33a:	61 2c       	mov	r6, r1
 33c:	71 2c       	mov	r7, r1
 33e:	f0 2d       	mov	r31, r0
 340:	01 c0       	rjmp	.+2      	; 0x344 <LCD_WriteNumber+0x74>
		num=num/10;
		i++;
 342:	18 2f       	mov	r17, r24
	{
		
	}
	while(num)
	{
		str[i]=num%10 +'0';
 344:	aa 24       	eor	r10, r10
 346:	a3 94       	inc	r10
 348:	b1 2c       	mov	r11, r1
 34a:	ac 0e       	add	r10, r28
 34c:	bd 1e       	adc	r11, r29
 34e:	a1 0e       	add	r10, r17
 350:	b1 1c       	adc	r11, r1
 352:	c7 01       	movw	r24, r14
 354:	b6 01       	movw	r22, r12
 356:	a3 01       	movw	r20, r6
 358:	92 01       	movw	r18, r4
 35a:	f2 d4       	rcall	.+2532   	; 0xd40 <__divmodsi4>
 35c:	60 5d       	subi	r22, 0xD0	; 208
 35e:	f5 01       	movw	r30, r10
 360:	60 83       	st	Z, r22
		num=num/10;
 362:	c2 2e       	mov	r12, r18
 364:	d3 2e       	mov	r13, r19
 366:	e4 2e       	mov	r14, r20
 368:	f5 2e       	mov	r15, r21
		i++;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	81 0f       	add	r24, r17
	}
	else
	{
		
	}
	while(num)
 36e:	c1 14       	cp	r12, r1
 370:	d1 04       	cpc	r13, r1
 372:	e1 04       	cpc	r14, r1
 374:	f1 04       	cpc	r15, r1
 376:	29 f7       	brne	.-54     	; 0x342 <LCD_WriteNumber+0x72>
	{
		str[i]=num%10 +'0';
		num=num/10;
		i++;
	}
	for(j=i-1;j>=0;j--)
 378:	f1 2e       	mov	r15, r17
 37a:	11 23       	and	r17, r17
 37c:	6c f0       	brlt	.+26     	; 0x398 <LCD_WriteNumber+0xc8>
	{
		LCD_WriteChar(str[j]);
 37e:	e1 e0       	ldi	r30, 0x01	; 1
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	ec 0f       	add	r30, r28
 384:	fd 1f       	adc	r31, r29
 386:	ef 0d       	add	r30, r15
 388:	f1 1d       	adc	r31, r1
 38a:	f7 fc       	sbrc	r15, 7
 38c:	fa 95       	dec	r31
 38e:	80 81       	ld	r24, Z
 390:	93 df       	rcall	.-218    	; 0x2b8 <LCD_WriteChar>
 392:	fa 94       	dec	r15
	{
		str[i]=num%10 +'0';
		num=num/10;
		i++;
	}
	for(j=i-1;j>=0;j--)
 394:	ff 20       	and	r15, r15
 396:	9c f7       	brge	.-26     	; 0x37e <LCD_WriteNumber+0xae>
	{
		LCD_WriteChar(str[j]);
	}
}
 398:	60 96       	adiw	r28, 0x10	; 16
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	df 90       	pop	r13
 3b0:	cf 90       	pop	r12
 3b2:	bf 90       	pop	r11
 3b4:	af 90       	pop	r10
 3b6:	7f 90       	pop	r7
 3b8:	6f 90       	pop	r6
 3ba:	5f 90       	pop	r5
 3bc:	4f 90       	pop	r4
 3be:	08 95       	ret

000003c0 <main>:
	
}
int main() {
	
	
	DIO_Init();
 3c0:	0a d0       	rcall	.+20     	; 0x3d6 <DIO_Init>
	LCD_Init();
 3c2:	2b df       	rcall	.-426    	; 0x21a <LCD_Init>
 3c4:	63 e0       	ldi	r22, 0x03	; 3
	LCD_WriteNumber(3);
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	81 df       	rcall	.-254    	; 0x2d0 <LCD_WriteNumber>
	/*Enable global interrupt*/
	sei();
 3ce:	78 94       	sei
	/*************************
	/* External event base system              
	* event:   pressing button  
	* action:  toggle 1            
	*************************/
	ButtonLed_System_Run();
 3d0:	6c de       	rcall	.-808    	; 0xaa <ButtonLed_System_Run>
 3d2:	76 de       	rcall	.-788    	; 0xc0 <Timer_3s_System_Run>
	/*************************
	/* Internal event base system              
	* event:   overflow timer 3s  
	* action:  toggle led2            
	*************************/
	Timer_3s_System_Run();
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <main+0x14>

000003d6 <DIO_Init>:
 3d6:	e2 e6       	ldi	r30, 0x62	; 98
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
	else
	{
		volt=READ_BIT(PIND,(pin-PIND0));
	}
	return volt;
}
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	91 91       	ld	r25, Z+
 3e2:	28 2f       	mov	r18, r24
 3e4:	26 95       	lsr	r18
 3e6:	26 95       	lsr	r18
 3e8:	26 95       	lsr	r18
 3ea:	38 2f       	mov	r19, r24
 3ec:	37 70       	andi	r19, 0x07	; 7
 3ee:	91 30       	cpi	r25, 0x01	; 1
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_Init+0x1e>
 3f2:	49 c0       	rjmp	.+146    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 3f4:	20 f0       	brcs	.+8      	; 0x3fe <DIO_Init+0x28>
 3f6:	92 30       	cpi	r25, 0x02	; 2
 3f8:	09 f4       	brne	.+2      	; 0x3fc <DIO_Init+0x26>
 3fa:	89 c0       	rjmp	.+274    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 3fc:	cf c0       	rjmp	.+414    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 3fe:	21 30       	cpi	r18, 0x01	; 1
 400:	a9 f0       	breq	.+42     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 402:	28 f0       	brcs	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 404:	22 30       	cpi	r18, 0x02	; 2
 406:	09 f1       	breq	.+66     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 408:	23 30       	cpi	r18, 0x03	; 3
 40a:	71 f1       	breq	.+92     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 40c:	c7 c0       	rjmp	.+398    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 40e:	9a b3       	in	r25, 0x1a	; 26
 410:	ba 01       	movw	r22, r20
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	3a 95       	dec	r19
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	9b 01       	movw	r18, r22
 41e:	96 2b       	or	r25, r22
 420:	9a bb       	out	0x1a, r25	; 26
 422:	9b b3       	in	r25, 0x1b	; 27
 424:	20 95       	com	r18
 426:	29 23       	and	r18, r25
 428:	2b bb       	out	0x1b, r18	; 27
 42a:	b8 c0       	rjmp	.+368    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 42c:	97 b3       	in	r25, 0x17	; 23
 42e:	ba 01       	movw	r22, r20
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	3a 95       	dec	r19
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	9b 01       	movw	r18, r22
 43c:	96 2b       	or	r25, r22
 43e:	97 bb       	out	0x17, r25	; 23
 440:	98 b3       	in	r25, 0x18	; 24
 442:	20 95       	com	r18
 444:	29 23       	and	r18, r25
 446:	28 bb       	out	0x18, r18	; 24
 448:	a9 c0       	rjmp	.+338    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 44a:	94 b3       	in	r25, 0x14	; 20
 44c:	ba 01       	movw	r22, r20
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	3a 95       	dec	r19
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	9b 01       	movw	r18, r22
 45a:	96 2b       	or	r25, r22
 45c:	94 bb       	out	0x14, r25	; 20
 45e:	95 b3       	in	r25, 0x15	; 21
 460:	20 95       	com	r18
 462:	29 23       	and	r18, r25
 464:	25 bb       	out	0x15, r18	; 21
 466:	9a c0       	rjmp	.+308    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 468:	91 b3       	in	r25, 0x11	; 17
 46a:	ba 01       	movw	r22, r20
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	3a 95       	dec	r19
 474:	e2 f7       	brpl	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	9b 01       	movw	r18, r22
 478:	96 2b       	or	r25, r22
 47a:	91 bb       	out	0x11, r25	; 17
 47c:	92 b3       	in	r25, 0x12	; 18
 47e:	20 95       	com	r18
 480:	29 23       	and	r18, r25
 482:	22 bb       	out	0x12, r18	; 18
 484:	8b c0       	rjmp	.+278    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 486:	21 30       	cpi	r18, 0x01	; 1
 488:	a9 f0       	breq	.+42     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 48a:	28 f0       	brcs	.+10     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 48c:	22 30       	cpi	r18, 0x02	; 2
 48e:	09 f1       	breq	.+66     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 490:	23 30       	cpi	r18, 0x03	; 3
 492:	71 f1       	breq	.+92     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 494:	83 c0       	rjmp	.+262    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 496:	9a b3       	in	r25, 0x1a	; 26
 498:	ba 01       	movw	r22, r20
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	3a 95       	dec	r19
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a4:	9b 01       	movw	r18, r22
 4a6:	20 95       	com	r18
 4a8:	92 23       	and	r25, r18
 4aa:	9a bb       	out	0x1a, r25	; 26
 4ac:	9b b3       	in	r25, 0x1b	; 27
 4ae:	29 23       	and	r18, r25
 4b0:	2b bb       	out	0x1b, r18	; 27
 4b2:	74 c0       	rjmp	.+232    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 4b4:	97 b3       	in	r25, 0x17	; 23
 4b6:	ba 01       	movw	r22, r20
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	3a 95       	dec	r19
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4c2:	9b 01       	movw	r18, r22
 4c4:	20 95       	com	r18
 4c6:	92 23       	and	r25, r18
 4c8:	97 bb       	out	0x17, r25	; 23
 4ca:	98 b3       	in	r25, 0x18	; 24
 4cc:	29 23       	and	r18, r25
 4ce:	28 bb       	out	0x18, r18	; 24
 4d0:	65 c0       	rjmp	.+202    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 4d2:	94 b3       	in	r25, 0x14	; 20
 4d4:	ba 01       	movw	r22, r20
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	3a 95       	dec	r19
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4e0:	9b 01       	movw	r18, r22
 4e2:	20 95       	com	r18
 4e4:	92 23       	and	r25, r18
 4e6:	94 bb       	out	0x14, r25	; 20
 4e8:	95 b3       	in	r25, 0x15	; 21
 4ea:	29 23       	and	r18, r25
 4ec:	25 bb       	out	0x15, r18	; 21
 4ee:	56 c0       	rjmp	.+172    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 4f0:	91 b3       	in	r25, 0x11	; 17
 4f2:	ba 01       	movw	r22, r20
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	3a 95       	dec	r19
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4fe:	9b 01       	movw	r18, r22
 500:	20 95       	com	r18
 502:	92 23       	and	r25, r18
 504:	91 bb       	out	0x11, r25	; 17
 506:	92 b3       	in	r25, 0x12	; 18
 508:	29 23       	and	r18, r25
 50a:	22 bb       	out	0x12, r18	; 18
 50c:	47 c0       	rjmp	.+142    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 50e:	21 30       	cpi	r18, 0x01	; 1
 510:	b1 f0       	breq	.+44     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 512:	28 f0       	brcs	.+10     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 514:	22 30       	cpi	r18, 0x02	; 2
 516:	19 f1       	breq	.+70     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 518:	23 30       	cpi	r18, 0x03	; 3
 51a:	89 f1       	breq	.+98     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
 51c:	3f c0       	rjmp	.+126    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 51e:	9a b3       	in	r25, 0x1a	; 26
 520:	ba 01       	movw	r22, r20
 522:	02 c0       	rjmp	.+4      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	3a 95       	dec	r19
 52a:	e2 f7       	brpl	.-8      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 52c:	9b 01       	movw	r18, r22
 52e:	36 2f       	mov	r19, r22
 530:	30 95       	com	r19
 532:	93 23       	and	r25, r19
 534:	9a bb       	out	0x1a, r25	; 26
 536:	9b b3       	in	r25, 0x1b	; 27
 538:	29 2b       	or	r18, r25
 53a:	2b bb       	out	0x1b, r18	; 27
 53c:	2f c0       	rjmp	.+94     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 53e:	97 b3       	in	r25, 0x17	; 23
 540:	ba 01       	movw	r22, r20
 542:	02 c0       	rjmp	.+4      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	3a 95       	dec	r19
 54a:	e2 f7       	brpl	.-8      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 54c:	9b 01       	movw	r18, r22
 54e:	36 2f       	mov	r19, r22
 550:	30 95       	com	r19
 552:	93 23       	and	r25, r19
 554:	97 bb       	out	0x17, r25	; 23
 556:	98 b3       	in	r25, 0x18	; 24
 558:	29 2b       	or	r18, r25
 55a:	28 bb       	out	0x18, r18	; 24
 55c:	1f c0       	rjmp	.+62     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 55e:	94 b3       	in	r25, 0x14	; 20
 560:	ba 01       	movw	r22, r20
 562:	02 c0       	rjmp	.+4      	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	3a 95       	dec	r19
 56a:	e2 f7       	brpl	.-8      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 56c:	9b 01       	movw	r18, r22
 56e:	36 2f       	mov	r19, r22
 570:	30 95       	com	r19
 572:	93 23       	and	r25, r19
 574:	94 bb       	out	0x14, r25	; 20
 576:	95 b3       	in	r25, 0x15	; 21
 578:	29 2b       	or	r18, r25
 57a:	25 bb       	out	0x15, r18	; 21
 57c:	0f c0       	rjmp	.+30     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 57e:	91 b3       	in	r25, 0x11	; 17
 580:	ba 01       	movw	r22, r20
 582:	02 c0       	rjmp	.+4      	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	3a 95       	dec	r19
 58a:	e2 f7       	brpl	.-8      	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 58c:	9b 01       	movw	r18, r22
 58e:	36 2f       	mov	r19, r22
 590:	30 95       	com	r19
 592:	93 23       	and	r25, r19
 594:	91 bb       	out	0x11, r25	; 17
 596:	92 b3       	in	r25, 0x12	; 18
 598:	29 2b       	or	r18, r25
 59a:	22 bb       	out	0x12, r18	; 18
 59c:	8f 5f       	subi	r24, 0xFF	; 255
 59e:	80 32       	cpi	r24, 0x20	; 32
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 5a2:	1e cf       	rjmp	.-452    	; 0x3e0 <DIO_Init+0xa>
 5a4:	08 95       	ret

000005a6 <DIO_WritePin>:
 5a6:	98 2f       	mov	r25, r24
 5a8:	96 95       	lsr	r25
 5aa:	96 95       	lsr	r25
 5ac:	96 95       	lsr	r25
 5ae:	87 70       	andi	r24, 0x07	; 7
 5b0:	61 30       	cpi	r22, 0x01	; 1
 5b2:	e1 f5       	brne	.+120    	; 0x62c <DIO_WritePin+0x86>
 5b4:	91 30       	cpi	r25, 0x01	; 1
 5b6:	99 f0       	breq	.+38     	; 0x5de <DIO_WritePin+0x38>
 5b8:	28 f0       	brcs	.+10     	; 0x5c4 <DIO_WritePin+0x1e>
 5ba:	92 30       	cpi	r25, 0x02	; 2
 5bc:	e9 f0       	breq	.+58     	; 0x5f8 <DIO_WritePin+0x52>
 5be:	93 30       	cpi	r25, 0x03	; 3
 5c0:	41 f1       	breq	.+80     	; 0x612 <DIO_WritePin+0x6c>
 5c2:	08 95       	ret
 5c4:	4b b3       	in	r20, 0x1b	; 27
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_WritePin+0x2c>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_WritePin+0x28>
 5d6:	cb 01       	movw	r24, r22
 5d8:	84 2b       	or	r24, r20
 5da:	8b bb       	out	0x1b, r24	; 27
 5dc:	08 95       	ret
 5de:	48 b3       	in	r20, 0x18	; 24
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_WritePin+0x46>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_WritePin+0x42>
 5f0:	cb 01       	movw	r24, r22
 5f2:	84 2b       	or	r24, r20
 5f4:	88 bb       	out	0x18, r24	; 24
 5f6:	08 95       	ret
 5f8:	45 b3       	in	r20, 0x15	; 21
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	b9 01       	movw	r22, r18
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_WritePin+0x60>
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	8a 95       	dec	r24
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_WritePin+0x5c>
 60a:	cb 01       	movw	r24, r22
 60c:	84 2b       	or	r24, r20
 60e:	85 bb       	out	0x15, r24	; 21
 610:	08 95       	ret
 612:	42 b3       	in	r20, 0x12	; 18
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	b9 01       	movw	r22, r18
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_WritePin+0x7a>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	8a 95       	dec	r24
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_WritePin+0x76>
 624:	cb 01       	movw	r24, r22
 626:	84 2b       	or	r24, r20
 628:	82 bb       	out	0x12, r24	; 18
 62a:	08 95       	ret
 62c:	61 11       	cpse	r22, r1
 62e:	3f c0       	rjmp	.+126    	; 0x6ae <DIO_WritePin+0x108>
 630:	91 30       	cpi	r25, 0x01	; 1
 632:	a1 f0       	breq	.+40     	; 0x65c <DIO_WritePin+0xb6>
 634:	28 f0       	brcs	.+10     	; 0x640 <DIO_WritePin+0x9a>
 636:	92 30       	cpi	r25, 0x02	; 2
 638:	f9 f0       	breq	.+62     	; 0x678 <DIO_WritePin+0xd2>
 63a:	93 30       	cpi	r25, 0x03	; 3
 63c:	59 f1       	breq	.+86     	; 0x694 <DIO_WritePin+0xee>
 63e:	08 95       	ret
 640:	4b b3       	in	r20, 0x1b	; 27
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	b9 01       	movw	r22, r18
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_WritePin+0xa8>
 64a:	66 0f       	add	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	8a 95       	dec	r24
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_WritePin+0xa4>
 652:	cb 01       	movw	r24, r22
 654:	80 95       	com	r24
 656:	84 23       	and	r24, r20
 658:	8b bb       	out	0x1b, r24	; 27
 65a:	08 95       	ret
 65c:	48 b3       	in	r20, 0x18	; 24
 65e:	21 e0       	ldi	r18, 0x01	; 1
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	b9 01       	movw	r22, r18
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_WritePin+0xc4>
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	8a 95       	dec	r24
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_WritePin+0xc0>
 66e:	cb 01       	movw	r24, r22
 670:	80 95       	com	r24
 672:	84 23       	and	r24, r20
 674:	88 bb       	out	0x18, r24	; 24
 676:	08 95       	ret
 678:	45 b3       	in	r20, 0x15	; 21
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	b9 01       	movw	r22, r18
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_WritePin+0xe0>
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	8a 95       	dec	r24
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_WritePin+0xdc>
 68a:	cb 01       	movw	r24, r22
 68c:	80 95       	com	r24
 68e:	84 23       	and	r24, r20
 690:	85 bb       	out	0x15, r24	; 21
 692:	08 95       	ret
 694:	42 b3       	in	r20, 0x12	; 18
 696:	21 e0       	ldi	r18, 0x01	; 1
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	b9 01       	movw	r22, r18
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_WritePin+0xfc>
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	8a 95       	dec	r24
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_WritePin+0xf8>
 6a6:	cb 01       	movw	r24, r22
 6a8:	80 95       	com	r24
 6aa:	84 23       	and	r24, r20
 6ac:	82 bb       	out	0x12, r24	; 18
 6ae:	08 95       	ret

000006b0 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
	if(pin<PINB0)
 6b0:	88 30       	cpi	r24, 0x08	; 8
 6b2:	68 f4       	brcc	.+26     	; 0x6ce <DIO_TogglePin+0x1e>
	{
		TOGGLE_BIT(PORTA,pin);
 6b4:	4b b3       	in	r20, 0x1b	; 27
 6b6:	21 e0       	ldi	r18, 0x01	; 1
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	b9 01       	movw	r22, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_TogglePin+0x12>
 6be:	66 0f       	add	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	8a 95       	dec	r24
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_TogglePin+0xe>
 6c6:	cb 01       	movw	r24, r22
 6c8:	84 27       	eor	r24, r20
 6ca:	8b bb       	out	0x1b, r24	; 27
 6cc:	08 95       	ret
	}
	else if(pin<PINC0)
 6ce:	80 31       	cpi	r24, 0x10	; 16
 6d0:	70 f4       	brcc	.+28     	; 0x6ee <DIO_TogglePin+0x3e>
	{
		TOGGLE_BIT(PORTB,(pin-PINB0));
 6d2:	48 b3       	in	r20, 0x18	; 24
 6d4:	88 50       	subi	r24, 0x08	; 8
 6d6:	21 e0       	ldi	r18, 0x01	; 1
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	b9 01       	movw	r22, r18
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_TogglePin+0x32>
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	8a 95       	dec	r24
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_TogglePin+0x2e>
 6e6:	cb 01       	movw	r24, r22
 6e8:	84 27       	eor	r24, r20
 6ea:	88 bb       	out	0x18, r24	; 24
 6ec:	08 95       	ret
	}
	else if(pin<PIND0)
 6ee:	88 31       	cpi	r24, 0x18	; 24
 6f0:	70 f4       	brcc	.+28     	; 0x70e <DIO_TogglePin+0x5e>
	{
		TOGGLE_BIT(PORTC,(pin-PINC0));
 6f2:	45 b3       	in	r20, 0x15	; 21
 6f4:	80 51       	subi	r24, 0x10	; 16
 6f6:	21 e0       	ldi	r18, 0x01	; 1
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	b9 01       	movw	r22, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_TogglePin+0x52>
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	8a 95       	dec	r24
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_TogglePin+0x4e>
 706:	cb 01       	movw	r24, r22
 708:	84 27       	eor	r24, r20
 70a:	85 bb       	out	0x15, r24	; 21
 70c:	08 95       	ret
	}
	else
	{
		TOGGLE_BIT(PORTD,(pin-PIND0));
 70e:	42 b3       	in	r20, 0x12	; 18
 710:	88 51       	subi	r24, 0x18	; 24
 712:	21 e0       	ldi	r18, 0x01	; 1
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	b9 01       	movw	r22, r18
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_TogglePin+0x6e>
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	8a 95       	dec	r24
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_TogglePin+0x6a>
 722:	cb 01       	movw	r24, r22
 724:	84 27       	eor	r24, r20
 726:	82 bb       	out	0x12, r24	; 18
 728:	08 95       	ret

0000072a <EX_INT_SetSenseControl>:
	{
		CLR_BIT(GICR,INT0);
	}
	else if(interrupt==EX_INT2)
	{
		CLR_BIT(GICR,INT2);
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	21 f5       	brne	.+72     	; 0x776 <EX_INT_SetSenseControl+0x4c>
 72e:	61 30       	cpi	r22, 0x01	; 1
 730:	69 f0       	breq	.+26     	; 0x74c <EX_INT_SetSenseControl+0x22>
 732:	28 f0       	brcs	.+10     	; 0x73e <EX_INT_SetSenseControl+0x14>
 734:	62 30       	cpi	r22, 0x02	; 2
 736:	89 f0       	breq	.+34     	; 0x75a <EX_INT_SetSenseControl+0x30>
 738:	63 30       	cpi	r22, 0x03	; 3
 73a:	b1 f0       	breq	.+44     	; 0x768 <EX_INT_SetSenseControl+0x3e>
 73c:	08 95       	ret
 73e:	85 b7       	in	r24, 0x35	; 53
 740:	8b 7f       	andi	r24, 0xFB	; 251
 742:	85 bf       	out	0x35, r24	; 53
 744:	85 b7       	in	r24, 0x35	; 53
 746:	87 7f       	andi	r24, 0xF7	; 247
 748:	85 bf       	out	0x35, r24	; 53
 74a:	08 95       	ret
 74c:	85 b7       	in	r24, 0x35	; 53
 74e:	84 60       	ori	r24, 0x04	; 4
 750:	85 bf       	out	0x35, r24	; 53
 752:	85 b7       	in	r24, 0x35	; 53
 754:	87 7f       	andi	r24, 0xF7	; 247
 756:	85 bf       	out	0x35, r24	; 53
 758:	08 95       	ret
 75a:	85 b7       	in	r24, 0x35	; 53
 75c:	8b 7f       	andi	r24, 0xFB	; 251
 75e:	85 bf       	out	0x35, r24	; 53
 760:	85 b7       	in	r24, 0x35	; 53
 762:	88 60       	ori	r24, 0x08	; 8
 764:	85 bf       	out	0x35, r24	; 53
 766:	08 95       	ret
 768:	85 b7       	in	r24, 0x35	; 53
 76a:	84 60       	ori	r24, 0x04	; 4
 76c:	85 bf       	out	0x35, r24	; 53
 76e:	85 b7       	in	r24, 0x35	; 53
 770:	88 60       	ori	r24, 0x08	; 8
 772:	85 bf       	out	0x35, r24	; 53
 774:	08 95       	ret
 776:	81 11       	cpse	r24, r1
 778:	24 c0       	rjmp	.+72     	; 0x7c2 <EX_INT_SetSenseControl+0x98>
 77a:	61 30       	cpi	r22, 0x01	; 1
 77c:	69 f0       	breq	.+26     	; 0x798 <EX_INT_SetSenseControl+0x6e>
 77e:	28 f0       	brcs	.+10     	; 0x78a <EX_INT_SetSenseControl+0x60>
 780:	62 30       	cpi	r22, 0x02	; 2
 782:	89 f0       	breq	.+34     	; 0x7a6 <EX_INT_SetSenseControl+0x7c>
 784:	63 30       	cpi	r22, 0x03	; 3
 786:	b1 f0       	breq	.+44     	; 0x7b4 <EX_INT_SetSenseControl+0x8a>
 788:	08 95       	ret
 78a:	85 b7       	in	r24, 0x35	; 53
 78c:	8e 7f       	andi	r24, 0xFE	; 254
 78e:	85 bf       	out	0x35, r24	; 53
 790:	85 b7       	in	r24, 0x35	; 53
 792:	8d 7f       	andi	r24, 0xFD	; 253
 794:	85 bf       	out	0x35, r24	; 53
 796:	08 95       	ret
 798:	85 b7       	in	r24, 0x35	; 53
 79a:	81 60       	ori	r24, 0x01	; 1
 79c:	85 bf       	out	0x35, r24	; 53
 79e:	85 b7       	in	r24, 0x35	; 53
 7a0:	8d 7f       	andi	r24, 0xFD	; 253
 7a2:	85 bf       	out	0x35, r24	; 53
 7a4:	08 95       	ret
 7a6:	85 b7       	in	r24, 0x35	; 53
 7a8:	8e 7f       	andi	r24, 0xFE	; 254
 7aa:	85 bf       	out	0x35, r24	; 53
 7ac:	85 b7       	in	r24, 0x35	; 53
 7ae:	82 60       	ori	r24, 0x02	; 2
 7b0:	85 bf       	out	0x35, r24	; 53
 7b2:	08 95       	ret
 7b4:	85 b7       	in	r24, 0x35	; 53
 7b6:	81 60       	ori	r24, 0x01	; 1
 7b8:	85 bf       	out	0x35, r24	; 53
 7ba:	85 b7       	in	r24, 0x35	; 53
 7bc:	82 60       	ori	r24, 0x02	; 2
 7be:	85 bf       	out	0x35, r24	; 53
 7c0:	08 95       	ret
 7c2:	82 30       	cpi	r24, 0x02	; 2
 7c4:	b9 f4       	brne	.+46     	; 0x7f4 <EX_INT_SetSenseControl+0xca>
 7c6:	61 30       	cpi	r22, 0x01	; 1
 7c8:	51 f0       	breq	.+20     	; 0x7de <EX_INT_SetSenseControl+0xb4>
 7ca:	28 f0       	brcs	.+10     	; 0x7d6 <EX_INT_SetSenseControl+0xac>
 7cc:	62 30       	cpi	r22, 0x02	; 2
 7ce:	59 f0       	breq	.+22     	; 0x7e6 <EX_INT_SetSenseControl+0xbc>
 7d0:	63 30       	cpi	r22, 0x03	; 3
 7d2:	69 f0       	breq	.+26     	; 0x7ee <EX_INT_SetSenseControl+0xc4>
 7d4:	08 95       	ret
 7d6:	84 b7       	in	r24, 0x34	; 52
 7d8:	80 64       	ori	r24, 0x40	; 64
 7da:	84 bf       	out	0x34, r24	; 52
 7dc:	08 95       	ret
 7de:	84 b7       	in	r24, 0x34	; 52
 7e0:	80 64       	ori	r24, 0x40	; 64
 7e2:	84 bf       	out	0x34, r24	; 52
 7e4:	08 95       	ret
 7e6:	84 b7       	in	r24, 0x34	; 52
 7e8:	8f 7b       	andi	r24, 0xBF	; 191
 7ea:	84 bf       	out	0x34, r24	; 52
 7ec:	08 95       	ret
 7ee:	84 b7       	in	r24, 0x34	; 52
 7f0:	80 64       	ori	r24, 0x40	; 64
 7f2:	84 bf       	out	0x34, r24	; 52
 7f4:	08 95       	ret

000007f6 <EX_INT_Enable>:
 7f6:	81 30       	cpi	r24, 0x01	; 1
 7f8:	21 f4       	brne	.+8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fa:	8b b7       	in	r24, 0x3b	; 59
 7fc:	80 68       	ori	r24, 0x80	; 128
 7fe:	8b bf       	out	0x3b, r24	; 59
 800:	08 95       	ret
 802:	81 11       	cpse	r24, r1
 804:	04 c0       	rjmp	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 806:	8b b7       	in	r24, 0x3b	; 59
 808:	80 64       	ori	r24, 0x40	; 64
 80a:	8b bf       	out	0x3b, r24	; 59
 80c:	08 95       	ret
 80e:	82 30       	cpi	r24, 0x02	; 2
 810:	19 f4       	brne	.+6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 812:	8b b7       	in	r24, 0x3b	; 59
 814:	80 62       	ori	r24, 0x20	; 32
 816:	8b bf       	out	0x3b, r24	; 59
 818:	08 95       	ret

0000081a <EX_INT_SetCall_Back>:
	
}

void EX_INT_SetCall_Back(EXINT_IntNumber_type interrupt, void(*ptr)(void))
{
	switch (interrupt)
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	21 f0       	breq	.+8      	; 0x826 <EX_INT_SetCall_Back+0xc>
 81e:	40 f0       	brcs	.+16     	; 0x830 <EX_INT_SetCall_Back+0x16>
 820:	82 30       	cpi	r24, 0x02	; 2
 822:	59 f0       	breq	.+22     	; 0x83a <EX_INT_SetCall_Back+0x20>
 824:	08 95       	ret
	{
		case EX_INT1:
		NT1_fptr=ptr;
 826:	70 93 86 00 	sts	0x0086, r23	; 0x800086 <NT1_fptr+0x1>
 82a:	60 93 85 00 	sts	0x0085, r22	; 0x800085 <NT1_fptr>
		break;
 82e:	08 95       	ret
		case EX_INT0:
		NTO_fptr=ptr;
 830:	70 93 88 00 	sts	0x0088, r23	; 0x800088 <NTO_fptr+0x1>
 834:	60 93 87 00 	sts	0x0087, r22	; 0x800087 <NTO_fptr>
		break;
 838:	08 95       	ret
		case EX_INT2:
		NT2_fptr=ptr;
 83a:	70 93 84 00 	sts	0x0084, r23	; 0x800084 <NT2_fptr+0x1>
 83e:	60 93 83 00 	sts	0x0083, r22	; 0x800083 <NT2_fptr>
 842:	08 95       	ret

00000844 <__vector_1>:
	}
}


ISR (INT0_vect)
{
 844:	1f 92       	push	r1
 846:	0f 92       	push	r0
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	0f 92       	push	r0
 84c:	11 24       	eor	r1, r1
 84e:	2f 93       	push	r18
 850:	3f 93       	push	r19
 852:	4f 93       	push	r20
 854:	5f 93       	push	r21
 856:	6f 93       	push	r22
 858:	7f 93       	push	r23
 85a:	8f 93       	push	r24
 85c:	9f 93       	push	r25
 85e:	af 93       	push	r26
 860:	bf 93       	push	r27
 862:	ef 93       	push	r30
 864:	ff 93       	push	r31
	if(NTO_fptr!=NULL_PTR)
 866:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <NTO_fptr>
 86a:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <NTO_fptr+0x1>
 86e:	30 97       	sbiw	r30, 0x00	; 0
 870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x15>
	{
		NTO_fptr();
 872:	09 95       	icall
	}
}
 874:	ff 91       	pop	r31
 876:	ef 91       	pop	r30
 878:	bf 91       	pop	r27
 87a:	af 91       	pop	r26
 87c:	9f 91       	pop	r25
 87e:	8f 91       	pop	r24
 880:	7f 91       	pop	r23
 882:	6f 91       	pop	r22
 884:	5f 91       	pop	r21
 886:	4f 91       	pop	r20
 888:	3f 91       	pop	r19
 88a:	2f 91       	pop	r18
 88c:	0f 90       	pop	r0
 88e:	0f be       	out	0x3f, r0	; 63
 890:	0f 90       	pop	r0
 892:	1f 90       	pop	r1
 894:	18 95       	reti

00000896 <__vector_2>:
ISR (INT1_vect)
{
 896:	1f 92       	push	r1
 898:	0f 92       	push	r0
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	0f 92       	push	r0
 89e:	11 24       	eor	r1, r1
 8a0:	2f 93       	push	r18
 8a2:	3f 93       	push	r19
 8a4:	4f 93       	push	r20
 8a6:	5f 93       	push	r21
 8a8:	6f 93       	push	r22
 8aa:	7f 93       	push	r23
 8ac:	8f 93       	push	r24
 8ae:	9f 93       	push	r25
 8b0:	af 93       	push	r26
 8b2:	bf 93       	push	r27
 8b4:	ef 93       	push	r30
 8b6:	ff 93       	push	r31
	if(NT1_fptr!=NULL_PTR)
 8b8:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <NT1_fptr>
 8bc:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <NT1_fptr+0x1>
 8c0:	30 97       	sbiw	r30, 0x00	; 0
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <__vector_2+0x30>
	{
		NT1_fptr();
 8c4:	09 95       	icall
	}
}
 8c6:	ff 91       	pop	r31
 8c8:	ef 91       	pop	r30
 8ca:	bf 91       	pop	r27
 8cc:	af 91       	pop	r26
 8ce:	9f 91       	pop	r25
 8d0:	8f 91       	pop	r24
 8d2:	7f 91       	pop	r23
 8d4:	6f 91       	pop	r22
 8d6:	5f 91       	pop	r21
 8d8:	4f 91       	pop	r20
 8da:	3f 91       	pop	r19
 8dc:	2f 91       	pop	r18
 8de:	0f 90       	pop	r0
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	0f 90       	pop	r0
 8e4:	1f 90       	pop	r1
 8e6:	18 95       	reti

000008e8 <__vector_3>:
ISR (INT2_vect)
{
 8e8:	1f 92       	push	r1
 8ea:	0f 92       	push	r0
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	0f 92       	push	r0
 8f0:	11 24       	eor	r1, r1
 8f2:	2f 93       	push	r18
 8f4:	3f 93       	push	r19
 8f6:	4f 93       	push	r20
 8f8:	5f 93       	push	r21
 8fa:	6f 93       	push	r22
 8fc:	7f 93       	push	r23
 8fe:	8f 93       	push	r24
 900:	9f 93       	push	r25
 902:	af 93       	push	r26
 904:	bf 93       	push	r27
 906:	ef 93       	push	r30
 908:	ff 93       	push	r31
	if(NT2_fptr!=NULL_PTR)
 90a:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <NT2_fptr>
 90e:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <NT2_fptr+0x1>
 912:	30 97       	sbiw	r30, 0x00	; 0
 914:	09 f0       	breq	.+2      	; 0x918 <__vector_3+0x30>
	{
		NT2_fptr();
 916:	09 95       	icall
	}
 918:	ff 91       	pop	r31
 91a:	ef 91       	pop	r30
 91c:	bf 91       	pop	r27
 91e:	af 91       	pop	r26
 920:	9f 91       	pop	r25
 922:	8f 91       	pop	r24
 924:	7f 91       	pop	r23
 926:	6f 91       	pop	r22
 928:	5f 91       	pop	r21
 92a:	4f 91       	pop	r20
 92c:	3f 91       	pop	r19
 92e:	2f 91       	pop	r18
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <__vector_12>:
void SPI_SetCallback(void(*ptr)(void))
{
	SPI_fptr=ptr;
}
ISR(SPI_STC_vect)
{
 93a:	1f 92       	push	r1
 93c:	0f 92       	push	r0
 93e:	0f b6       	in	r0, 0x3f	; 63
 940:	0f 92       	push	r0
 942:	11 24       	eor	r1, r1
 944:	2f 93       	push	r18
 946:	3f 93       	push	r19
 948:	4f 93       	push	r20
 94a:	5f 93       	push	r21
 94c:	6f 93       	push	r22
 94e:	7f 93       	push	r23
 950:	8f 93       	push	r24
 952:	9f 93       	push	r25
 954:	af 93       	push	r26
 956:	bf 93       	push	r27
 958:	ef 93       	push	r30
 95a:	ff 93       	push	r31
	if(SPI_fptr!=NULL_PTR)
 95c:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <SPI_fptr>
 960:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <SPI_fptr+0x1>
 964:	30 97       	sbiw	r30, 0x00	; 0
 966:	09 f0       	breq	.+2      	; 0x96a <__vector_12+0x30>
	{
		SPI_fptr();
 968:	09 95       	icall
	}
 96a:	ff 91       	pop	r31
 96c:	ef 91       	pop	r30
 96e:	bf 91       	pop	r27
 970:	af 91       	pop	r26
 972:	9f 91       	pop	r25
 974:	8f 91       	pop	r24
 976:	7f 91       	pop	r23
 978:	6f 91       	pop	r22
 97a:	5f 91       	pop	r21
 97c:	4f 91       	pop	r20
 97e:	3f 91       	pop	r19
 980:	2f 91       	pop	r18
 982:	0f 90       	pop	r0
 984:	0f be       	out	0x3f, r0	; 63
 986:	0f 90       	pop	r0
 988:	1f 90       	pop	r1
 98a:	18 95       	reti

0000098c <__vector_11>:
{
	if(Timer1_OCB_Fptr!=NULL_PTR)
	{
		Timer1_OCB_Fptr();
	}
}
 98c:	1f 92       	push	r1
 98e:	0f 92       	push	r0
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	0f 92       	push	r0
 994:	11 24       	eor	r1, r1
 996:	2f 93       	push	r18
 998:	3f 93       	push	r19
 99a:	4f 93       	push	r20
 99c:	5f 93       	push	r21
 99e:	6f 93       	push	r22
 9a0:	7f 93       	push	r23
 9a2:	8f 93       	push	r24
 9a4:	9f 93       	push	r25
 9a6:	af 93       	push	r26
 9a8:	bf 93       	push	r27
 9aa:	ef 93       	push	r30
 9ac:	ff 93       	push	r31
 9ae:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <Timer0_OVF_Fptr>
 9b2:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <Timer0_OVF_Fptr+0x1>
 9b6:	30 97       	sbiw	r30, 0x00	; 0
 9b8:	09 f0       	breq	.+2      	; 0x9bc <__vector_11+0x30>
 9ba:	09 95       	icall
 9bc:	ff 91       	pop	r31
 9be:	ef 91       	pop	r30
 9c0:	bf 91       	pop	r27
 9c2:	af 91       	pop	r26
 9c4:	9f 91       	pop	r25
 9c6:	8f 91       	pop	r24
 9c8:	7f 91       	pop	r23
 9ca:	6f 91       	pop	r22
 9cc:	5f 91       	pop	r21
 9ce:	4f 91       	pop	r20
 9d0:	3f 91       	pop	r19
 9d2:	2f 91       	pop	r18
 9d4:	0f 90       	pop	r0
 9d6:	0f be       	out	0x3f, r0	; 63
 9d8:	0f 90       	pop	r0
 9da:	1f 90       	pop	r1
 9dc:	18 95       	reti

000009de <Timer1_Init>:
 9de:	82 30       	cpi	r24, 0x02	; 2
 9e0:	29 f1       	breq	.+74     	; 0xa2c <Timer1_Init+0x4e>
 9e2:	28 f4       	brcc	.+10     	; 0x9ee <Timer1_Init+0x10>
 9e4:	88 23       	and	r24, r24
 9e6:	41 f0       	breq	.+16     	; 0x9f8 <Timer1_Init+0x1a>
 9e8:	81 30       	cpi	r24, 0x01	; 1
 9ea:	99 f0       	breq	.+38     	; 0xa12 <Timer1_Init+0x34>
 9ec:	45 c0       	rjmp	.+138    	; 0xa78 <Timer1_Init+0x9a>
 9ee:	83 30       	cpi	r24, 0x03	; 3
 9f0:	51 f1       	breq	.+84     	; 0xa46 <Timer1_Init+0x68>
 9f2:	84 30       	cpi	r24, 0x04	; 4
 9f4:	a9 f1       	breq	.+106    	; 0xa60 <Timer1_Init+0x82>
 9f6:	40 c0       	rjmp	.+128    	; 0xa78 <Timer1_Init+0x9a>
 9f8:	8f b5       	in	r24, 0x2f	; 47
 9fa:	8e 7f       	andi	r24, 0xFE	; 254
 9fc:	8f bd       	out	0x2f, r24	; 47
 9fe:	8f b5       	in	r24, 0x2f	; 47
 a00:	8d 7f       	andi	r24, 0xFD	; 253
 a02:	8f bd       	out	0x2f, r24	; 47
 a04:	8e b5       	in	r24, 0x2e	; 46
 a06:	87 7f       	andi	r24, 0xF7	; 247
 a08:	8e bd       	out	0x2e, r24	; 46
 a0a:	8e b5       	in	r24, 0x2e	; 46
 a0c:	8f 7e       	andi	r24, 0xEF	; 239
 a0e:	8e bd       	out	0x2e, r24	; 46
 a10:	33 c0       	rjmp	.+102    	; 0xa78 <Timer1_Init+0x9a>
 a12:	8f b5       	in	r24, 0x2f	; 47
 a14:	8e 7f       	andi	r24, 0xFE	; 254
 a16:	8f bd       	out	0x2f, r24	; 47
 a18:	8f b5       	in	r24, 0x2f	; 47
 a1a:	8d 7f       	andi	r24, 0xFD	; 253
 a1c:	8f bd       	out	0x2f, r24	; 47
 a1e:	8e b5       	in	r24, 0x2e	; 46
 a20:	88 60       	ori	r24, 0x08	; 8
 a22:	8e bd       	out	0x2e, r24	; 46
 a24:	8e b5       	in	r24, 0x2e	; 46
 a26:	80 61       	ori	r24, 0x10	; 16
 a28:	8e bd       	out	0x2e, r24	; 46
 a2a:	26 c0       	rjmp	.+76     	; 0xa78 <Timer1_Init+0x9a>
 a2c:	8f b5       	in	r24, 0x2f	; 47
 a2e:	8e 7f       	andi	r24, 0xFE	; 254
 a30:	8f bd       	out	0x2f, r24	; 47
 a32:	8f b5       	in	r24, 0x2f	; 47
 a34:	8d 7f       	andi	r24, 0xFD	; 253
 a36:	8f bd       	out	0x2f, r24	; 47
 a38:	8e b5       	in	r24, 0x2e	; 46
 a3a:	88 60       	ori	r24, 0x08	; 8
 a3c:	8e bd       	out	0x2e, r24	; 46
 a3e:	8e b5       	in	r24, 0x2e	; 46
 a40:	8f 7e       	andi	r24, 0xEF	; 239
 a42:	8e bd       	out	0x2e, r24	; 46
 a44:	19 c0       	rjmp	.+50     	; 0xa78 <Timer1_Init+0x9a>
 a46:	8f b5       	in	r24, 0x2f	; 47
 a48:	8e 7f       	andi	r24, 0xFE	; 254
 a4a:	8f bd       	out	0x2f, r24	; 47
 a4c:	8f b5       	in	r24, 0x2f	; 47
 a4e:	82 60       	ori	r24, 0x02	; 2
 a50:	8f bd       	out	0x2f, r24	; 47
 a52:	8e b5       	in	r24, 0x2e	; 46
 a54:	88 60       	ori	r24, 0x08	; 8
 a56:	8e bd       	out	0x2e, r24	; 46
 a58:	8e b5       	in	r24, 0x2e	; 46
 a5a:	80 61       	ori	r24, 0x10	; 16
 a5c:	8e bd       	out	0x2e, r24	; 46
 a5e:	0c c0       	rjmp	.+24     	; 0xa78 <Timer1_Init+0x9a>
 a60:	8f b5       	in	r24, 0x2f	; 47
 a62:	81 60       	ori	r24, 0x01	; 1
 a64:	8f bd       	out	0x2f, r24	; 47
 a66:	8f b5       	in	r24, 0x2f	; 47
 a68:	82 60       	ori	r24, 0x02	; 2
 a6a:	8f bd       	out	0x2f, r24	; 47
 a6c:	8e b5       	in	r24, 0x2e	; 46
 a6e:	88 60       	ori	r24, 0x08	; 8
 a70:	8e bd       	out	0x2e, r24	; 46
 a72:	8e b5       	in	r24, 0x2e	; 46
 a74:	80 61       	ori	r24, 0x10	; 16
 a76:	8e bd       	out	0x2e, r24	; 46
 a78:	41 30       	cpi	r20, 0x01	; 1
 a7a:	69 f0       	breq	.+26     	; 0xa96 <Timer1_Init+0xb8>
 a7c:	28 f0       	brcs	.+10     	; 0xa88 <Timer1_Init+0xaa>
 a7e:	42 30       	cpi	r20, 0x02	; 2
 a80:	89 f0       	breq	.+34     	; 0xaa4 <Timer1_Init+0xc6>
 a82:	43 30       	cpi	r20, 0x03	; 3
 a84:	b1 f0       	breq	.+44     	; 0xab2 <Timer1_Init+0xd4>
 a86:	1b c0       	rjmp	.+54     	; 0xabe <Timer1_Init+0xe0>
 a88:	8f b5       	in	r24, 0x2f	; 47
 a8a:	8f 7b       	andi	r24, 0xBF	; 191
 a8c:	8f bd       	out	0x2f, r24	; 47
 a8e:	8f b5       	in	r24, 0x2f	; 47
 a90:	8f 77       	andi	r24, 0x7F	; 127
 a92:	8f bd       	out	0x2f, r24	; 47
 a94:	14 c0       	rjmp	.+40     	; 0xabe <Timer1_Init+0xe0>
 a96:	8f b5       	in	r24, 0x2f	; 47
 a98:	80 64       	ori	r24, 0x40	; 64
 a9a:	8f bd       	out	0x2f, r24	; 47
 a9c:	8f b5       	in	r24, 0x2f	; 47
 a9e:	8f 77       	andi	r24, 0x7F	; 127
 aa0:	8f bd       	out	0x2f, r24	; 47
 aa2:	0d c0       	rjmp	.+26     	; 0xabe <Timer1_Init+0xe0>
 aa4:	8f b5       	in	r24, 0x2f	; 47
 aa6:	8f 7b       	andi	r24, 0xBF	; 191
 aa8:	8f bd       	out	0x2f, r24	; 47
 aaa:	8f b5       	in	r24, 0x2f	; 47
 aac:	80 68       	ori	r24, 0x80	; 128
 aae:	8f bd       	out	0x2f, r24	; 47
 ab0:	06 c0       	rjmp	.+12     	; 0xabe <Timer1_Init+0xe0>
 ab2:	8f b5       	in	r24, 0x2f	; 47
 ab4:	80 64       	ori	r24, 0x40	; 64
 ab6:	8f bd       	out	0x2f, r24	; 47
 ab8:	8f b5       	in	r24, 0x2f	; 47
 aba:	80 68       	ori	r24, 0x80	; 128
 abc:	8f bd       	out	0x2f, r24	; 47
 abe:	21 30       	cpi	r18, 0x01	; 1
 ac0:	69 f0       	breq	.+26     	; 0xadc <Timer1_Init+0xfe>
 ac2:	28 f0       	brcs	.+10     	; 0xace <Timer1_Init+0xf0>
 ac4:	22 30       	cpi	r18, 0x02	; 2
 ac6:	89 f0       	breq	.+34     	; 0xaea <Timer1_Init+0x10c>
 ac8:	23 30       	cpi	r18, 0x03	; 3
 aca:	b1 f0       	breq	.+44     	; 0xaf8 <Timer1_Init+0x11a>
 acc:	1b c0       	rjmp	.+54     	; 0xb04 <Timer1_Init+0x126>
 ace:	8f b5       	in	r24, 0x2f	; 47
 ad0:	8f 7e       	andi	r24, 0xEF	; 239
 ad2:	8f bd       	out	0x2f, r24	; 47
 ad4:	8f b5       	in	r24, 0x2f	; 47
 ad6:	8f 7d       	andi	r24, 0xDF	; 223
 ad8:	8f bd       	out	0x2f, r24	; 47
 ada:	14 c0       	rjmp	.+40     	; 0xb04 <Timer1_Init+0x126>
 adc:	8f b5       	in	r24, 0x2f	; 47
 ade:	80 61       	ori	r24, 0x10	; 16
 ae0:	8f bd       	out	0x2f, r24	; 47
 ae2:	8f b5       	in	r24, 0x2f	; 47
 ae4:	8f 7d       	andi	r24, 0xDF	; 223
 ae6:	8f bd       	out	0x2f, r24	; 47
 ae8:	0d c0       	rjmp	.+26     	; 0xb04 <Timer1_Init+0x126>
 aea:	8f b5       	in	r24, 0x2f	; 47
 aec:	8f 7e       	andi	r24, 0xEF	; 239
 aee:	8f bd       	out	0x2f, r24	; 47
 af0:	8f b5       	in	r24, 0x2f	; 47
 af2:	80 62       	ori	r24, 0x20	; 32
 af4:	8f bd       	out	0x2f, r24	; 47
 af6:	06 c0       	rjmp	.+12     	; 0xb04 <Timer1_Init+0x126>
 af8:	8f b5       	in	r24, 0x2f	; 47
 afa:	80 61       	ori	r24, 0x10	; 16
 afc:	8f bd       	out	0x2f, r24	; 47
 afe:	8f b5       	in	r24, 0x2f	; 47
 b00:	80 62       	ori	r24, 0x20	; 32
 b02:	8f bd       	out	0x2f, r24	; 47
 b04:	8e b5       	in	r24, 0x2e	; 46
 b06:	88 7f       	andi	r24, 0xF8	; 248
 b08:	8e bd       	out	0x2e, r24	; 46
 b0a:	8e b5       	in	r24, 0x2e	; 46
 b0c:	68 2b       	or	r22, r24
 b0e:	6e bd       	out	0x2e, r22	; 46
 b10:	08 95       	ret

00000b12 <Timer1_OCA_InterruptEnable>:
 b12:	89 b7       	in	r24, 0x39	; 57
 b14:	80 61       	ori	r24, 0x10	; 16
 b16:	89 bf       	out	0x39, r24	; 57
 b18:	08 95       	ret

00000b1a <Timer1_OCA_SetCallBack>:
 b1a:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <Timer1_OCA_Fptr+0x1>
 b1e:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Timer1_OCA_Fptr>
 b22:	08 95       	ret

00000b24 <__vector_9>:
 b24:	1f 92       	push	r1
 b26:	0f 92       	push	r0
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	0f 92       	push	r0
 b2c:	11 24       	eor	r1, r1
 b2e:	2f 93       	push	r18
 b30:	3f 93       	push	r19
 b32:	4f 93       	push	r20
 b34:	5f 93       	push	r21
 b36:	6f 93       	push	r22
 b38:	7f 93       	push	r23
 b3a:	8f 93       	push	r24
 b3c:	9f 93       	push	r25
 b3e:	af 93       	push	r26
 b40:	bf 93       	push	r27
 b42:	ef 93       	push	r30
 b44:	ff 93       	push	r31
 b46:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <Timer1_OVF_Fptr>
 b4a:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <Timer1_OVF_Fptr+0x1>
 b4e:	30 97       	sbiw	r30, 0x00	; 0
 b50:	09 f0       	breq	.+2      	; 0xb54 <__vector_9+0x30>
 b52:	09 95       	icall
 b54:	ff 91       	pop	r31
 b56:	ef 91       	pop	r30
 b58:	bf 91       	pop	r27
 b5a:	af 91       	pop	r26
 b5c:	9f 91       	pop	r25
 b5e:	8f 91       	pop	r24
 b60:	7f 91       	pop	r23
 b62:	6f 91       	pop	r22
 b64:	5f 91       	pop	r21
 b66:	4f 91       	pop	r20
 b68:	3f 91       	pop	r19
 b6a:	2f 91       	pop	r18
 b6c:	0f 90       	pop	r0
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	0f 90       	pop	r0
 b72:	1f 90       	pop	r1
 b74:	18 95       	reti

00000b76 <__vector_7>:
 b76:	1f 92       	push	r1
 b78:	0f 92       	push	r0
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	0f 92       	push	r0
 b7e:	11 24       	eor	r1, r1
 b80:	2f 93       	push	r18
 b82:	3f 93       	push	r19
 b84:	4f 93       	push	r20
 b86:	5f 93       	push	r21
 b88:	6f 93       	push	r22
 b8a:	7f 93       	push	r23
 b8c:	8f 93       	push	r24
 b8e:	9f 93       	push	r25
 b90:	af 93       	push	r26
 b92:	bf 93       	push	r27
 b94:	ef 93       	push	r30
 b96:	ff 93       	push	r31
 b98:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <Timer1_OCA_Fptr>
 b9c:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <Timer1_OCA_Fptr+0x1>
 ba0:	30 97       	sbiw	r30, 0x00	; 0
 ba2:	09 f0       	breq	.+2      	; 0xba6 <__vector_7+0x30>
 ba4:	09 95       	icall
 ba6:	ff 91       	pop	r31
 ba8:	ef 91       	pop	r30
 baa:	bf 91       	pop	r27
 bac:	af 91       	pop	r26
 bae:	9f 91       	pop	r25
 bb0:	8f 91       	pop	r24
 bb2:	7f 91       	pop	r23
 bb4:	6f 91       	pop	r22
 bb6:	5f 91       	pop	r21
 bb8:	4f 91       	pop	r20
 bba:	3f 91       	pop	r19
 bbc:	2f 91       	pop	r18
 bbe:	0f 90       	pop	r0
 bc0:	0f be       	out	0x3f, r0	; 63
 bc2:	0f 90       	pop	r0
 bc4:	1f 90       	pop	r1
 bc6:	18 95       	reti

00000bc8 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
 bc8:	1f 92       	push	r1
 bca:	0f 92       	push	r0
 bcc:	0f b6       	in	r0, 0x3f	; 63
 bce:	0f 92       	push	r0
 bd0:	11 24       	eor	r1, r1
 bd2:	2f 93       	push	r18
 bd4:	3f 93       	push	r19
 bd6:	4f 93       	push	r20
 bd8:	5f 93       	push	r21
 bda:	6f 93       	push	r22
 bdc:	7f 93       	push	r23
 bde:	8f 93       	push	r24
 be0:	9f 93       	push	r25
 be2:	af 93       	push	r26
 be4:	bf 93       	push	r27
 be6:	ef 93       	push	r30
 be8:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULL_PTR)
 bea:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <Timer1_ICU_Fptr>
 bee:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <Timer1_ICU_Fptr+0x1>
 bf2:	30 97       	sbiw	r30, 0x00	; 0
 bf4:	09 f0       	breq	.+2      	; 0xbf8 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
 bf6:	09 95       	icall
	}
}
 bf8:	ff 91       	pop	r31
 bfa:	ef 91       	pop	r30
 bfc:	bf 91       	pop	r27
 bfe:	af 91       	pop	r26
 c00:	9f 91       	pop	r25
 c02:	8f 91       	pop	r24
 c04:	7f 91       	pop	r23
 c06:	6f 91       	pop	r22
 c08:	5f 91       	pop	r21
 c0a:	4f 91       	pop	r20
 c0c:	3f 91       	pop	r19
 c0e:	2f 91       	pop	r18
 c10:	0f 90       	pop	r0
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	0f 90       	pop	r0
 c16:	1f 90       	pop	r1
 c18:	18 95       	reti

00000c1a <__vector_15>:
{
	UART_RX_Fptr=localFptr;
}

 ISR(USART_TXC_vect)
 {
 c1a:	1f 92       	push	r1
 c1c:	0f 92       	push	r0
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	0f 92       	push	r0
 c22:	11 24       	eor	r1, r1
 c24:	2f 93       	push	r18
 c26:	3f 93       	push	r19
 c28:	4f 93       	push	r20
 c2a:	5f 93       	push	r21
 c2c:	6f 93       	push	r22
 c2e:	7f 93       	push	r23
 c30:	8f 93       	push	r24
 c32:	9f 93       	push	r25
 c34:	af 93       	push	r26
 c36:	bf 93       	push	r27
 c38:	ef 93       	push	r30
 c3a:	ff 93       	push	r31
	 if(UART_TX_Fptr!=NULL_PTR)
 c3c:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <UART_TX_Fptr>
 c40:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <UART_TX_Fptr+0x1>
 c44:	30 97       	sbiw	r30, 0x00	; 0
 c46:	09 f0       	breq	.+2      	; 0xc4a <__vector_15+0x30>
	 {
		 UART_TX_Fptr();
 c48:	09 95       	icall
	 }
	 
 }
 c4a:	ff 91       	pop	r31
 c4c:	ef 91       	pop	r30
 c4e:	bf 91       	pop	r27
 c50:	af 91       	pop	r26
 c52:	9f 91       	pop	r25
 c54:	8f 91       	pop	r24
 c56:	7f 91       	pop	r23
 c58:	6f 91       	pop	r22
 c5a:	5f 91       	pop	r21
 c5c:	4f 91       	pop	r20
 c5e:	3f 91       	pop	r19
 c60:	2f 91       	pop	r18
 c62:	0f 90       	pop	r0
 c64:	0f be       	out	0x3f, r0	; 63
 c66:	0f 90       	pop	r0
 c68:	1f 90       	pop	r1
 c6a:	18 95       	reti

00000c6c <__vector_13>:
  ISR(USART_RXC_vect)
  {
 c6c:	1f 92       	push	r1
 c6e:	0f 92       	push	r0
 c70:	0f b6       	in	r0, 0x3f	; 63
 c72:	0f 92       	push	r0
 c74:	11 24       	eor	r1, r1
 c76:	2f 93       	push	r18
 c78:	3f 93       	push	r19
 c7a:	4f 93       	push	r20
 c7c:	5f 93       	push	r21
 c7e:	6f 93       	push	r22
 c80:	7f 93       	push	r23
 c82:	8f 93       	push	r24
 c84:	9f 93       	push	r25
 c86:	af 93       	push	r26
 c88:	bf 93       	push	r27
 c8a:	ef 93       	push	r30
 c8c:	ff 93       	push	r31
	  if(UART_RX_Fptr!=NULL_PTR)
 c8e:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <UART_RX_Fptr>
 c92:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <UART_RX_Fptr+0x1>
 c96:	30 97       	sbiw	r30, 0x00	; 0
 c98:	09 f0       	breq	.+2      	; 0xc9c <__vector_13+0x30>
	  {
		  UART_RX_Fptr();
 c9a:	09 95       	icall
	  }
	  
 c9c:	ff 91       	pop	r31
 c9e:	ef 91       	pop	r30
 ca0:	bf 91       	pop	r27
 ca2:	af 91       	pop	r26
 ca4:	9f 91       	pop	r25
 ca6:	8f 91       	pop	r24
 ca8:	7f 91       	pop	r23
 caa:	6f 91       	pop	r22
 cac:	5f 91       	pop	r21
 cae:	4f 91       	pop	r20
 cb0:	3f 91       	pop	r19
 cb2:	2f 91       	pop	r18
 cb4:	0f 90       	pop	r0
 cb6:	0f be       	out	0x3f, r0	; 63
 cb8:	0f 90       	pop	r0
 cba:	1f 90       	pop	r1
 cbc:	18 95       	reti

00000cbe <Timer1_SetInterruptTime_ms>:
	}
}
/******************************************Set Interrupt Time******************************************************/
/* maximum 65 ms**/
void Timer1_SetInterruptTime_ms (u16 time,void(*LocalFptr)(void))
{
 cbe:	0f 93       	push	r16
 cc0:	1f 93       	push	r17
 cc2:	cf 93       	push	r28
 cc4:	df 93       	push	r29
 cc6:	8c 01       	movw	r16, r24
 cc8:	eb 01       	movw	r28, r22
	Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE,TIMER1_SCALER_8,OCRA_DISCONNECTED,OCRB_DISCONNECTED);
 cca:	20 e0       	ldi	r18, 0x00	; 0
 ccc:	40 e0       	ldi	r20, 0x00	; 0
 cce:	62 e0       	ldi	r22, 0x02	; 2
 cd0:	82 e0       	ldi	r24, 0x02	; 2
 cd2:	85 de       	rcall	.-758    	; 0x9de <Timer1_Init>
	OCR1A=(u32)((u32)time*1000)-1;
 cd4:	28 ee       	ldi	r18, 0xE8	; 232
 cd6:	33 e0       	ldi	r19, 0x03	; 3
 cd8:	02 9f       	mul	r16, r18
 cda:	c0 01       	movw	r24, r0
 cdc:	03 9f       	mul	r16, r19
 cde:	90 0d       	add	r25, r0
 ce0:	12 9f       	mul	r17, r18
 ce2:	90 0d       	add	r25, r0
 ce4:	11 24       	eor	r1, r1
 ce6:	01 97       	sbiw	r24, 0x01	; 1
 ce8:	9b bd       	out	0x2b, r25	; 43
 cea:	8a bd       	out	0x2a, r24	; 42
	Timer1_OCA_SetCallBack(LocalFptr);
 cec:	ce 01       	movw	r24, r28
	Timer1_OCA_InterruptEnable();
 cee:	15 df       	rcall	.-470    	; 0xb1a <Timer1_OCA_SetCallBack>
 cf0:	10 df       	rcall	.-480    	; 0xb12 <Timer1_OCA_InterruptEnable>
}
 cf2:	df 91       	pop	r29
 cf4:	cf 91       	pop	r28
 cf6:	1f 91       	pop	r17
 cf8:	0f 91       	pop	r16
 cfa:	08 95       	ret

00000cfc <__udivmodsi4>:
 cfc:	a1 e2       	ldi	r26, 0x21	; 33
 cfe:	1a 2e       	mov	r1, r26
 d00:	aa 1b       	sub	r26, r26
 d02:	bb 1b       	sub	r27, r27
 d04:	fd 01       	movw	r30, r26
 d06:	0d c0       	rjmp	.+26     	; 0xd22 <__udivmodsi4_ep>

00000d08 <__udivmodsi4_loop>:
 d08:	aa 1f       	adc	r26, r26
 d0a:	bb 1f       	adc	r27, r27
 d0c:	ee 1f       	adc	r30, r30
 d0e:	ff 1f       	adc	r31, r31
 d10:	a2 17       	cp	r26, r18
 d12:	b3 07       	cpc	r27, r19
 d14:	e4 07       	cpc	r30, r20
 d16:	f5 07       	cpc	r31, r21
 d18:	20 f0       	brcs	.+8      	; 0xd22 <__udivmodsi4_ep>
 d1a:	a2 1b       	sub	r26, r18
 d1c:	b3 0b       	sbc	r27, r19
 d1e:	e4 0b       	sbc	r30, r20
 d20:	f5 0b       	sbc	r31, r21

00000d22 <__udivmodsi4_ep>:
 d22:	66 1f       	adc	r22, r22
 d24:	77 1f       	adc	r23, r23
 d26:	88 1f       	adc	r24, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	1a 94       	dec	r1
 d2c:	69 f7       	brne	.-38     	; 0xd08 <__udivmodsi4_loop>
 d2e:	60 95       	com	r22
 d30:	70 95       	com	r23
 d32:	80 95       	com	r24
 d34:	90 95       	com	r25
 d36:	9b 01       	movw	r18, r22
 d38:	ac 01       	movw	r20, r24
 d3a:	bd 01       	movw	r22, r26
 d3c:	cf 01       	movw	r24, r30
 d3e:	08 95       	ret

00000d40 <__divmodsi4>:
 d40:	05 2e       	mov	r0, r21
 d42:	97 fb       	bst	r25, 7
 d44:	16 f4       	brtc	.+4      	; 0xd4a <__divmodsi4+0xa>
 d46:	00 94       	com	r0
 d48:	0f d0       	rcall	.+30     	; 0xd68 <__negsi2>
 d4a:	57 fd       	sbrc	r21, 7
 d4c:	05 d0       	rcall	.+10     	; 0xd58 <__divmodsi4_neg2>
 d4e:	d6 df       	rcall	.-84     	; 0xcfc <__udivmodsi4>
 d50:	07 fc       	sbrc	r0, 7
 d52:	02 d0       	rcall	.+4      	; 0xd58 <__divmodsi4_neg2>
 d54:	46 f4       	brtc	.+16     	; 0xd66 <__divmodsi4_exit>
 d56:	08 c0       	rjmp	.+16     	; 0xd68 <__negsi2>

00000d58 <__divmodsi4_neg2>:
 d58:	50 95       	com	r21
 d5a:	40 95       	com	r20
 d5c:	30 95       	com	r19
 d5e:	21 95       	neg	r18
 d60:	3f 4f       	sbci	r19, 0xFF	; 255
 d62:	4f 4f       	sbci	r20, 0xFF	; 255
 d64:	5f 4f       	sbci	r21, 0xFF	; 255

00000d66 <__divmodsi4_exit>:
 d66:	08 95       	ret

00000d68 <__negsi2>:
 d68:	90 95       	com	r25
 d6a:	80 95       	com	r24
 d6c:	70 95       	com	r23
 d6e:	61 95       	neg	r22
 d70:	7f 4f       	sbci	r23, 0xFF	; 255
 d72:	8f 4f       	sbci	r24, 0xFF	; 255
 d74:	9f 4f       	sbci	r25, 0xFF	; 255
 d76:	08 95       	ret

00000d78 <_exit>:
 d78:	f8 94       	cli

00000d7a <__stop_program>:
 d7a:	ff cf       	rjmp	.-2      	; 0xd7a <__stop_program>
